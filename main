#!/usr/bin/python
__user__ = 'mmluqman'
__author__ = "Muhammad Muzzamil LUQMAN"
__copyright__ = ["Copyright 2015, CBiB", "Project SuperClass"]
__credits__ = ["Muhammad Muzzamil LUQMAN", "Romain GIOT"]
__license__ = "GPL"
__version__ = "0.0"
__maintainer__ = "Muhammad Muzzamil LUQMAN"
__email__ = 'mmluqman@u-bordeaux.fr'
__status__ = 'Prototype'


from Tkinter import *
#from Tkinter.filedialog import *
from tkFileDialog import *
#from Tkinter import messagebox
from pandas import *
from visualizeResults import *

def btn_choosedata():
    var_dataDir.set(askdirectory(initialdir='/Users/mmluqman/Documents/Research/Project/001_SuperClass/002_ManipData'))
    print var_dataDir.get()
    button_run.configure(state=NORMAL)
    button_choose.configure(state=DISABLED)


def btn_runCellClassificationAlgo():
    #messagebox.showinfo('Cell Classification Algorithm (v0)', 'running on data: '+var_dataDir.get())
    button_run.configure(state=DISABLED)
    
    plt = visualize_results_plate_class_color()
    plt.show(block=FALSE)

    data = pandas.DataFrame(np.random.random((8,12)))
    fig = visualize_results_plate_class_membership(data)
    fig.show()

    button_choose.configure(state=NORMAL)


if __name__ == "__main__":
    winDataChoose = Tk()
    winDataChoose.title('Project SuperClass - Cell Classification Algorithm (v0)')
    winDataChoose.focus_force()

    label1 = Label(winDataChoose, text='Choose the directory of data, to run the classification algorithm on it: ')
    label1.grid(row=0, column=0, pady=20, padx = 0)

    var_dataDir = StringVar(winDataChoose)
    var_dataDir.set('')

    button_choose = Button(winDataChoose, text='Choose ...', command = btn_choosedata)
    button_choose.grid(row=0, column=1, pady=20, padx = 0)

    button_run = Button(winDataChoose, text='Run Cell Classification Algorithm (v0)', command=btn_runCellClassificationAlgo)
    button_run.configure(state=DISABLED)
    button_run.grid(row=1, column=0, columnspan=2)

    label2 = Label(winDataChoose, text='Show result graphs: ')
    label2.grid(row=2, column=0, sticky=E)

    var_showGraphs = StringVar(winDataChoose)
    var_showGraphs.set("No") # initial value
    option_showGraphs = OptionMenu(winDataChoose, var_showGraphs, "No", "Yes")
    option_showGraphs.grid(row=2, column=1, sticky=W)

    canvas_results = Canvas(winDataChoose, width=550, height=400, bd=1,relief='ridge')
    canvas_results.grid(row=3, column=0, columnspan=2)

    winDataChoose.mainloop()
